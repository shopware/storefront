(function(){var e={89:function(){},508:function(){},366:function(){},144:function(){},958:function(){},417:function(){},511:function(){},736:function(){Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"content",key:"theme",roles:{viewer:{privileges:["theme:read","theme_child:read","sales_channel:read",Shopware.Service("privileges").getPrivileges("media.viewer")],dependencies:[]},editor:{privileges:["theme:update","theme_child:update","tag:read","product_media:read","product:read","category:read","product_manufacturer:read","mail_template_media:read","mail_template:read","document_base_config:read","user:read","payment_method:read","shipping_method:read","custom_field_set:read","custom_field:read","custom_field_set_relation:read",Shopware.Service("privileges").getPrivileges("media.creator")],dependencies:["theme.viewer"]},creator:{privileges:["theme:create","theme_child:create"],dependencies:["theme.viewer","theme.editor"]},deleter:{privileges:["theme:delete","theme_child:delete"],dependencies:["theme.viewer"]}}})},333:function(){let{Mixin:e}=Shopware;e.register("theme",{inject:["repositoryFactory","themeService","acl"],data(){return{showDeleteModal:!1,showMediaModal:!1,showRenameModal:!1,showDuplicateModal:!1,newThemeName:"",modalTheme:null}},computed:{themeRepository(){return this.repositoryFactory.create("theme")}},methods:{onDeleteTheme(e){this.acl.can("theme.deleter")&&(this.modalTheme=e,this.showDeleteModal=!0)},onCloseDeleteModal(){this.showDeleteModal=!1,this.modalTheme=null},onConfirmThemeDelete(){this.deleteTheme(this.modalTheme),this.showDeleteModal=!1,this.modalTheme=null},deleteTheme(e){let t=this.$tc("sw-theme-manager.components.themeListItem.notificationDeleteErrorTitle"),n=this.$tc("sw-theme-manager.components.themeListItem.notificationDeleteErrorMessage");this.isLoading=!0,this.themeRepository.delete(e.id,Shopware.Context.api).then(()=>{if(this.getList){this.getList();return}this.$router.push({name:"sw.theme.manager.index"})}).catch(()=>{this.isLoading=!1,this.createNotificationError({title:t,message:n})})},onDuplicateTheme(e){this.acl.can("theme.creator")&&(this.modalTheme=e,this.showDuplicateModal=!0)},onCloseDuplicateModal(){this.showDuplicateModal=!1,this.modalTheme=null,this.newThemeName=""},onConfirmThemeDuplicate(){this.duplicateTheme(this.modalTheme,this.newThemeName),this.showDuplicateModal=!1,this.modalTheme=null,this.newThemeName=""},duplicateTheme(e,t){let n=this.themeRepository.create(Shopware.Context.api);n.name=t,n.parentThemeId=e.id,n.author=e.author,n.description=e.description,n.labels=e.labels,n.helpTexts=e.helpTexts,n.customFields=e.customFields,n.baseConfig=null,n.configValues=null,n.previewMediaId=e.previewMediaId,n.active=!0,this.themeRepository.save(n,Shopware.Context.api).then(()=>{this.$router.push({name:"sw.theme.manager.detail",params:{id:n.id}})})},onRenameTheme(e){this.acl.can("theme.editor")&&(this.modalTheme=e,this.newThemeName=this.modalTheme.name,this.showRenameModal=!0)},onCloseRenameModal(){this.showRenameModal=!1,this.modalTheme=null,this.newThemeName=""},onConfirmThemeRename(){this.RenameTheme(this.modalTheme,this.newThemeName),this.showRenameModal=!1,this.modalTheme=null,this.newThemeName=""},RenameTheme(e,t){t&&(e.name=t),this.themeRepository.save(e,Shopware.Context.api)}}})},53:function(e,t,n){var a=n(89);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("4d50b9ce",a,!0,{})},641:function(e,t,n){var a=n(508);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("6fe55754",a,!0,{})},5:function(e,t,n){var a=n(366);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("0f777ed0",a,!0,{})},693:function(e,t,n){var a=n(144);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("0435b50c",a,!0,{})},338:function(e,t,n){var a=n(958);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("22cffc22",a,!0,{})},510:function(e,t,n){var a=n(417);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("b7112ade",a,!0,{})},228:function(e,t,n){var a=n(511);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("2d810c04",a,!0,{})},346:function(e,t,n){"use strict";function a(e,t){for(var n=[],a={},s=0;s<t.length;s++){var i=t[s],l=i[0],o={id:e+":"+s,css:i[1],media:i[2],sourceMap:i[3]};a[l]?a[l].parts.push(o):n.push(a[l]={id:l,parts:[o]})}return n}n.d(t,{Z:function(){return g}});var s="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!s)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},l=s&&(document.head||document.getElementsByTagName("head")[0]),o=null,m=0,r=!1,h=function(){},d=null,c="data-vue-ssr-id",_="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function g(e,t,n,s){r=n,d=s||{};var l=a(e,t);return p(l),function(t){for(var n=[],s=0;s<l.length;s++){var o=i[l[s].id];o.refs--,n.push(o)}t?p(l=a(e,t)):l=[];for(var s=0;s<n.length;s++){var o=n[s];if(0===o.refs){for(var m=0;m<o.parts.length;m++)o.parts[m]();delete i[o.id]}}}}function p(e){for(var t=0;t<e.length;t++){var n=e[t],a=i[n.id];if(a){a.refs++;for(var s=0;s<a.parts.length;s++)a.parts[s](n.parts[s]);for(;s<n.parts.length;s++)a.parts.push(u(n.parts[s]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{for(var l=[],s=0;s<n.parts.length;s++)l.push(u(n.parts[s]));i[n.id]={id:n.id,refs:1,parts:l}}}}function w(){var e=document.createElement("style");return e.type="text/css",l.appendChild(e),e}function u(e){var t,n,a=document.querySelector("style["+c+'~="'+e.id+'"]');if(a){if(r)return h;a.parentNode.removeChild(a)}if(_){var s=m++;t=b.bind(null,a=o||(o=w()),s,!1),n=b.bind(null,a,s,!0)}else t=v.bind(null,a=w()),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){a?(a.css!==e.css||a.media!==e.media||a.sourceMap!==e.sourceMap)&&t(e=a):n()}}var f=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function b(e,t,n,a){var s=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=f(t,s);else{var i=document.createTextNode(s),l=e.childNodes;l[t]&&e.removeChild(l[t]),l.length?e.insertBefore(i,l[t]):e.appendChild(i)}}function v(e,t){var n=t.css,a=t.media,s=t.sourceMap;if(a&&e.setAttribute("media",a),d.ssrId&&e.setAttribute(c,t.id),s&&(n+="\n/*# sourceURL="+s.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(a){var s=t[a];if(void 0!==s)return s.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,n),i.exports}n.d=function(e,t){for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="bundles/storefront/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/storefront/"),function(){"use strict";n(333),n(510);let{Component:e,Mixin:t}=Shopware,a=Shopware.Data.Criteria,{getObjectDiff:s,cloneDeep:i}=Shopware.Utils.object,{isArray:l}=Shopware.Utils.types;e.register("sw-theme-manager-detail",{template:'{% block sw_theme_manager_detail %}\n    <sw-page class="sw-theme-manager-detail">\n\n        {% block sw_theme_manager_detail_search_bar %}\n            <template #search-bar>\n                <sw-search-bar :placeholder="$tc(\'sw-theme-manager.general.placeholderSearchBar\')"\n                               :entityService="themeRepository"\n                               @search="onSearch">\n                </sw-search-bar>\n            </template>\n        {% endblock %}\n\n        {% block sw_theme_manager_detail_smart_bar_header %}\n            <template #smart-bar-header>\n\n                {% block sw_theme_manager_detail_smart_bar_header_title %}\n                    <h2 v-if="theme">\n                        {% block sw_theme_manager_detail_smart_bar_header_title_text %}\n                            {{ theme.name }}\n                        {% endblock %}\n                    </h2>\n\n                    <h2 v-else>\n                        {% block sw_theme_manager_detail_smart_bar_header_title_text_default %}\n                            {{ $tc(\'sw-theme-manager.list.textThemeOverview\') }}\n                        {% endblock %}\n                    </h2>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block sw_theme_manager_detail_smart_bar_actions %}\n            <template #smart-bar-actions>\n                <sw-button-group\n                    v-tooltip.bottom="{\n                        message: $tc(\'sw-privileges.tooltip.warning\'),\n                        disabled: acl.can(\'theme.editor\'),\n                        showOnDisabledElements: true\n                    }"\n                    class="sw-theme-manager-detail__save-button-group"\n                    :split-button="true"\n                >\n                    {% block sw_theme_manager_detail_smart_bar_actions_save %}\n                        <sw-button-process\n                            v-tooltip.bottom="{\n                                message: $tc(\'sw-privileges.tooltip.warning\'),\n                                disabled: acl.can(\'theme.editor\'),\n                                showOnDisabledElements: true\n                            }"\n                            class="sw_theme_manager_detail__save-action"\n                            :is-loading="isLoading"\n                            :process-success="isSaveSuccessful"\n                            variant="primary"\n                            :disabled="isLoading || !acl.can(\'theme.editor\')"\n                            @process-finish="saveFinish"\n                            @click.prevent="onSave"\n                        >\n                            {{ $tc(\'sw-theme-manager.actions.save\') }}\n                        </sw-button-process>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_smart_bar_actions_save_context_menu %}\n                        <sw-context-button>\n                            <template #button>\n                                <sw-button\n                                    class="sw_theme_manager_detail__button-context-menu"\n                                    square\n                                    variant="primary"\n                                    :disabled="isLoading || !acl.can(\'theme.editor\')"\n                                >\n                                    <sw-icon\n                                            name="regular-chevron-down-xs"\n                                            size="16"\n                                    />\n                                </sw-button>\n                            </template>\n\n                            {% block sw_theme_manager_detail_smart_bar_actions_save_context_menu_actions %}\n                                {% block sw_theme_manager_detail_smart_bar_actions_save_clean %}\n                                    <sw-context-menu-item\n                                        class="sw_theme_manager_detail__save-clean-action"\n                                        :disabled="!acl.can(\'theme.editor\')"\n                                        @click="onSaveClean"\n                                        v-tooltip.top="{\n                                            message: $tc(\'sw-theme-manager.actions.saveCleanToolTip\'),\n                                            disabled: !acl.can(\'theme.editor\'),\n                                            showOnDisabledElements: true\n                                        }"\n                                    >\n                                        {{ $tc(\'sw-theme-manager.actions.saveClean\') }}\n                                    </sw-context-menu-item>\n                                {% endblock %}\n                            {% endblock %}\n                        </sw-context-button>\n                    {% endblock %}\n                </sw-button-group>\n            </template>\n        {% endblock %}\n\n        {% block sw_theme_manager_detail_content %}\n            <template #content>\n                <div\n                    v-if="!shouldShowContent"\n                    class="sw-theme-manager-detail__content-skeleton"\n                >\n                    <sw-skeleton />\n                    <sw-skeleton />\n                </div>\n\n                <div v-else class="sw-theme-manager-detail__content">\n                    <sw-tabs\n                        defaultItem="default"\n                        positionIdentifier="theme-manager-detail-tabs"\n                        @new-item-active="onChangeTab"\n                    >\n                        <template #default="{ active }">\n                            <sw-tabs-item v-if="hasMoreThanOneTab"\n                                          v-for="(tab, tabName) in structuredThemeFields.tabs"\n                                          :key="tabName"\n                                          :title="tab.label"\n                                          :name="tabName"\n                                          :active="active === tabName">\n                                {{ tab.label || $tc(\'sw-theme-manager.general.defaultTab\') }}\n                            </sw-tabs-item>\n                        </template>\n\n                        <template #content="{ active }">\n                            <template v-if="active === \'default\'">\n                                <template v-if="isDerived">\n                                    {% block sw_theme_manager_detail_content_inheritance %}\n                                        <div class="sw-theme-manager-detail__inheritance">\n                                            {% block sw_theme_manager_detail_content_inheritance_icon %}\n                                                <sw-icon :multicolor="true" size="20" name="regular-link-horizontal"></sw-icon>\n                                            {% endblock %}\n\n                                            {% block sw_theme_manager_detail_content_inheritance_text %}\n                                                <p class="sw-theme-manager-detail__inheritance-text" v-if="parentTheme">\n                                                    {{ $tc(\'sw-theme-manager.detail.inheritanceInfo\', 0, { parentThemeName: parentTheme.name }) }}\n                                                </p>\n                                                <p class="sw-theme-manager-detail__inheritance-text" v-else-if="defaultTheme">\n                                                    {{ $tc(\'sw-theme-manager.detail.inheritanceInfo\', 0, { parentThemeName: defaultTheme.name }) }}\n                                                </p>\n                                            {% endblock %}\n                                        </div>\n                                    {% endblock %}\n                                </template>\n\n                                {% block sw_theme_manager_detail_content_info %}\n                                    <sw-card\n                                        class="sw-theme-manager-detail__info-card"\n                                        positionIdentifier="theme-manager-detail-info"\n                                    >\n                                        <div class="sw-theme-manager-detail__info">\n\n                                            {% block sw_theme_manager_detail_content_info_image %}\n                                                <div class="sw-theme-manager-detail__info-image" :style="previewMedia"></div>\n                                            {% endblock %}\n\n                                            {% block sw_theme_manager_detail_content_info_content %}\n                                                <div class="sw-theme-manager-detail__info-content">\n                                                    <div class="sw-theme-manager-detail__info-name">{{ theme.name }}</div>\n                                                    <div class="sw-theme-manager-detail__info-author">{{ theme.author }}</div>\n                                                    <div v-if="theme.description" class="sw-theme-manager-detail__info-descr">\n                                                        <p class="sw-theme-manager-detail__info-descr-title">\n                                                            {{ $tc(\'sw-theme-manager.detail.description\') }}:\n                                                        </p>\n                                                        <p>{{ theme.description |truncate(140) }}</p>\n                                                    </div>\n\n                                                    <sw-entity-multi-select\n                                                        v-model:entityCollection="theme.salesChannels"\n                                                        class="sw-theme-manager-detail__saleschannels-select"\n                                                        :label="$tc(\'sw-theme-manager.detail.salesChannel\')"\n                                                        :disabled="!acl.can(\'theme.editor\')"\n                                                        :helpText="isDefaultTheme ? $tc(\'sw-theme-manager.detail.salesChannelHelpText\') : null"\n                                                        :placeholder="$tc(\'sw-theme-manager.detail.placeholder.selectSalesChannel\')"\n                                                        :selectionDisablingMethod="selectionDisablingMethod">\n                                                        <template #result-item="{ item, index }">\n                                                            <span v-if="!isThemeCompatible(item)"></span>\n                                                        </template>\n                                                    </sw-entity-multi-select>\n\n                                                </div>\n                                            {% endblock %}\n                                        </div>\n\n                                        {% block sw_theme_manager_detail_content_info_context_button %}\n                                            <sw-context-button\n                                                class="sw-theme-manager-detail__context-button"\n                                                :zIndex="1100"\n                                            >\n\n                                                {% block sw_theme_manager_detail_context_button_option_rename %}\n                                                    <sw-context-menu-item\n                                                        @click="onRenameTheme(theme)"\n                                                        :disabled="!acl.can(\'theme.editor\')">\n                                                        {{ $tc(\'sw-theme-manager.actions.rename\') }}\n                                                    </sw-context-menu-item>\n                                                {% endblock %}\n\n                                                {% block sw_theme_manager_detail_context_button_option_create %}\n                                                    <sw-context-menu-item\n                                                        @click="onDuplicateTheme(theme)"\n                                                        v-if="!theme.parentThemeId"\n                                                        :disabled="!acl.can(\'theme.creator\')">\n                                                        {{ $tc(\'sw-theme-manager.actions.duplicate\') }}\n                                                    </sw-context-menu-item>\n                                                {% endblock %}\n\n                                                {% block sw_theme_manager_detail_context_button_option_reset %}\n                                                    <sw-context-menu-item\n                                                        @click="onReset"\n                                                        v-if="theme.configValues !== null"\n                                                        :disabled="!acl.can(\'theme.editor\')"\n                                                        variant="danger">\n                                                        {{ $tc(\'sw-theme-manager.actions.buttonReset\') }}\n                                                    </sw-context-menu-item>\n                                                {% endblock %}\n\n                                                {% block sw_theme_manager_detail_context_button_option_delete %}\n                                                    <sw-context-menu-item\n                                                        v-if="theme.parentThemeId"\n                                                        :disabled="!acl.can(\'theme.deleter\') || theme.salesChannels.length > 0"\n                                                        v-tooltip.right="deleteDisabledToolTip"\n                                                        class="sw-theme-manager-detail__option-delete"\n                                                        variant="danger"\n                                                        @click="onDeleteTheme(theme)">\n                                                        {{ $tc(\'sw-theme-manager.actions.delete\') }}\n                                                    </sw-context-menu-item>\n                                                {% endblock %}\n                                            </sw-context-button>\n                                        {% endblock %}\n                                    </sw-card>\n                                {% endblock %}\n                            </template>\n\n                            <template v-for="(tab, tabName) in structuredThemeFields.tabs">\n                                <template v-if="tabName === active">\n                                    {% block sw_theme_manager_detail_content_areas %}\n                                        <sw-card v-for="(block, blockName) in tab.blocks"\n                                                 :key="blockName"\n                                                 class="sw-theme-manager-detail__area"\n                                                 positionIdentifier="theme-manager-detail-content"\n                                                 :title="block.label">\n\n                                            {% block sw_theme_manager_detail_content_sections %}\n                                                <sw-card-section v-for="(section, sectionName) in block.sections"\n                                                                 :key="sectionName">\n                                                    <div v-if="section.label" class="sw-theme-manager-detail__content--section_title">\n                                                        {{ section.label }}\n                                                    </div>\n\n                                                    {% block sw_theme_manager_detail_content_fields %}\n                                                        <sw-container class="sw-theme-manager-detail__content--section_field">\n                                                            <div v-for="(field, fieldName) in section.fields"\n                                                                 :key="fieldName"\n                                                                 class="sw-theme-manager-detail__content--section_field"\n                                                                 :class="{\'sw-theme-manager-detail__content--section_field-full-width\': field.fullWidth}">\n                                                                <template v-if="themeConfig[fieldName] && baseThemeConfig[fieldName]">\n                                                                    <template v-if="mapSwFieldTypes(field.type) === \'select\'">\n                                                                        <sw-inherit-wrapper\n                                                                            :class="\'sw-field-id-\' + fieldName"\n                                                                            v-model:value="currentThemeConfig[fieldName].value"\n                                                                            :ref="`wrapper-${fieldName}`"\n                                                                            :has-parent="theme.baseConfig?.fields?.[fieldName] == null"\n                                                                            :inherited-value="baseThemeConfig[fieldName].value"\n                                                                            :label="!field.label ? \'\' : field.label"\n                                                                            :customInheritationCheckFunction="checkInheritanceFunction(fieldName)"\n                                                                            @update:value="handleInheritanceInput($event, fieldName)"\n                                                                        >\n                                                                            <template #content="{ currentValue, updateCurrentValue, isInherited }">\n                                                                                <sw-select-field\n                                                                                    v-model:value="currentValue"\n                                                                                    :placeholder="field.placeholder"\n                                                                                    :options="field.options"\n                                                                                    :helpText="!field.helpText ? null : field.helpText"\n                                                                                    :disabled="isInherited || !acl.can(\'theme.editor\')"\n                                                                                    @update:value="updateCurrentValue"\n                                                                                >\n                                                                                </sw-select-field>\n                                                                            </template>\n                                                                        </sw-inherit-wrapper>\n                                                                    </template>\n\n                                                                    <template v-else-if="field.type === \'url\'">\n                                                                        <sw-inherit-wrapper\n                                                                            :class="\'sw-field-id-\' + fieldName"\n                                                                            v-model:value="currentThemeConfig[fieldName].value"\n                                                                            :ref="`wrapper-${fieldName}`"\n                                                                            :has-parent="theme.baseConfig?.fields?.[fieldName] == null"\n                                                                            :inherited-value="baseThemeConfig[fieldName].value"\n                                                                            :label="!field.label ? \'\' : field.label"\n                                                                            :customInheritationCheckFunction="checkInheritanceFunction(fieldName)"\n                                                                            @update:value="handleInheritanceInput($event, fieldName)"\n                                                                        >\n                                                                            <template #content="{ currentValue, updateCurrentValue, isInherited }">\n                                                                                <sw-url-field\n                                                                                    v-model:value="currentValue"\n                                                                                    :helpText="!field.helpText ? null : field.helpText"\n                                                                                    :disabled="isInherited || !acl.can(\'theme.editor\')"\n                                                                                    @update:value="updateCurrentValue"\n                                                                                >\n                                                                                </sw-url-field>\n                                                                            </template>\n                                                                        </sw-inherit-wrapper>\n                                                                    </template>\n                                                                    <div v-else-if="field.type === \'media\'">\n\n                                                                        <sw-upload-listener\n                                                                            :uploadTag="tabName + \'-\' + blockName + \'-\' + sectionName + \'-\' + fieldName"\n                                                                            @media-upload-finish="successfulUpload($event, currentThemeConfig[fieldName])"\n                                                                            autoUpload>\n                                                                        </sw-upload-listener>\n\n                                                                        <sw-inherit-wrapper\n                                                                            :class="\'sw-field-id-\' + fieldName"\n                                                                            v-model:value="currentThemeConfig[fieldName].value"\n                                                                            :ref="`wrapper-${fieldName}`"\n                                                                            :has-parent="theme.baseConfig?.fields?.[fieldName] == null"\n                                                                            :inherited-value="baseThemeConfig[fieldName].value"\n                                                                            :label="!field.label ? \'\' : field.label"\n                                                                            :customInheritationCheckFunction="checkInheritanceFunction(fieldName)"\n                                                                            @update:value="handleInheritanceInput($event, fieldName)"\n                                                                        >\n                                                                            <template #content="{ currentValue, updateCurrentValue, isInherited, removeInheritance }">\n                                                                                <sw-media-upload-v2\n                                                                                    :source="currentValue"\n                                                                                    :uploadTag="tabName + \'-\' + blockName + \'-\' + sectionName + \'-\' + fieldName"\n                                                                                    :helpText="!field.helpText ? null : field.helpText"\n                                                                                    :ref="tabName + \'-\' + blockName + \'-\' + sectionName + \'-\' + fieldName"\n                                                                                    :defaultFolder="themeRepository.schema.entity"\n                                                                                    :allowMultiSelect="false"\n                                                                                    :disabled="!acl.can(\'theme.editor\') || themeConfig[fieldName].editable === false"\n                                                                                    @media-drop="onDropMedia($event, currentThemeConfig[fieldName])"\n                                                                                    @media-upload-sidebar-open="openMediaSidebar()"\n                                                                                    @media-upload-remove-image="removeMediaItem(fieldName, updateCurrentValue, isInherited, removeInheritance)">\n                                                                                </sw-media-upload-v2>\n                                                                            </template>\n                                                                        </sw-inherit-wrapper>\n                                                                    </div>\n\n                                                                    <template v-else-if="mapSwFieldTypes(field.type)">\n                                                                        <sw-inherit-wrapper\n                                                                            :class="\'sw-field-id-\' + fieldName"\n                                                                            v-model:value="currentThemeConfig[fieldName].value"\n                                                                            :ref="`wrapper-${fieldName}`"\n                                                                            :has-parent="theme.baseConfig?.fields?.[fieldName] == null"\n                                                                            :inherited-value="baseThemeConfig[fieldName].value"\n                                                                            :label="!field.label ? \'\' : field.label"\n                                                                            :customInheritationCheckFunction="checkInheritanceFunction(fieldName)"\n                                                                            @update:value="handleInheritanceInput($event, fieldName)"\n                                                                        >\n                                                                            <template #content="{ currentValue, updateCurrentValue, isInherited }">\n                                                                                <sw-colorpicker\n                                                                                    v-if="mapSwFieldTypes(field.type) === \'colorpicker\'"\n                                                                                    :helpText="!field.helpText ? null : field.helpText"\n                                                                                    :disabled="isInherited || !acl.can(\'theme.editor\') || themeConfig[fieldName].editable === false"\n                                                                                    :value="currentValue"\n                                                                                    @update:value="updateCurrentValue"\n                                                                                />\n\n                                                                                <sw-text-field\n                                                                                    v-else-if="mapSwFieldTypes(field.type) === \'text\' || mapSwFieldTypes(field.type) === null"\n                                                                                    :helpText="!field.helpText ? null : field.helpText"\n                                                                                    :disabled="isInherited || !acl.can(\'theme.editor\') || themeConfig[fieldName].editable === false"\n                                                                                    :value="currentValue | cssValue"\n                                                                                    @update:value="updateCurrentValue"\n                                                                                />\n                                                                            </template>\n                                                                        </sw-inherit-wrapper>\n                                                                    </template>\n\n                                                                    <template v-else-if="themeConfig[fieldName].editable !== false">\n                                                                        <sw-inherit-wrapper\n                                                                            :class="\'sw-field-id-\' + fieldName"\n                                                                            v-model:value="currentThemeConfig[fieldName].value"\n                                                                            :ref="`wrapper-${fieldName}`"\n                                                                            :has-parent="theme.baseConfig?.fields?.[fieldName] == null"\n                                                                            :inherited-value="baseThemeConfig[fieldName].value"\n                                                                            :label="!field.label ? \'\' : field.label"\n                                                                            :customInheritationCheckFunction="checkInheritanceFunction(fieldName)"\n                                                                            @update:value="handleInheritanceInput($event, fieldName)"\n                                                                        >\n                                                                            <template #content="{ currentValue, updateCurrentValue, isInherited }">\n                                                                                <sw-form-field-renderer\n                                                                                    v-bind="getBind(field)"\n                                                                                    :value="currentValue"\n                                                                                    :disabled="isInherited || !acl.can(\'theme.editor\')"\n                                                                                    @update:value="updateCurrentValue"\n                                                                                >\n                                                                                </sw-form-field-renderer>\n                                                                            </template>\n                                                                        </sw-inherit-wrapper>\n                                                                    </template>\n                                                                </template>\n                                                            </div>\n                                                        </sw-container>\n                                                    {% endblock %}\n                                                </sw-card-section>\n                                            {% endblock %}\n                                        </sw-card>\n                                    {% endblock %}\n                                </template>\n                            </template>\n                        </template>\n                    </sw-tabs>\n                </div>\n            {% endblock %}\n\n            {% block sw_theme_manager_reset_modal %}\n                <sw-modal v-if="showResetModal"\n                          @modal-close="onCloseResetModal"\n                          :title="$tc(\'sw-theme-manager.modal.modalTitleReset\')"\n                          variant="small">\n\n                    {% block sw_theme_manager_reset_modal_reset_text %}\n                        <p class="sw_theme_manager__confirm-reset-text">\n                            {{ $tc(\'sw-theme-manager.modal.modalTextResetInfo\') }}\n                        </p>\n                        <p v-if="theme.salesChannels.length > 0" class="sw_theme_manager__confirm-reset-text">\n                            {{ $tc(\'sw-theme-manager.modal.modalTextResetAssigned\') }}\n                        </p>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_reset_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_reset_modal_cancel %}\n                                <sw-button @click="onCloseResetModal"\n                                           size="small">\n                                    {{ $tc(\'sw-theme-manager.actions.buttonCancel\') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_theme_manager_reset_modal_confirm %}\n                                <sw-button @click="onConfirmThemeReset"\n                                           variant="danger"\n                                           size="small">\n                                    {{ $tc(\'sw-theme-manager.actions.buttonReset\') }}\n                                </sw-button>\n                            {% endblock %}\n                     </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n\n            {% block sw_theme_manager_detail_delete_modal %}\n                <sw-modal v-if="showDeleteModal"\n                          @modal-close="onCloseDeleteModal"\n                          :title="$tc(\'global.default.warning\')"\n                          variant="small">\n\n                    {% block sw_theme_manager_detail_delete_modal_info %}\n                        <div class="sw_theme_manager__confirm-delete-text">\n                            {{ $tc(\'sw-theme-manager.modal.textDeleteInfo\', 0,\n                            { themeName: theme.name }) }}\n                        </div>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_delete_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_detail_delete_modal_cancel %}\n                                <sw-button @click="onCloseDeleteModal"\n                                           size="small">\n                                    {{ $tc(\'sw-theme-manager.modal.buttonCancel\') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_theme_manager_detail_delete_modal_confirm %}\n                                <sw-button @click="onConfirmThemeDelete"\n                                           variant="danger"\n                                           size="small">\n                                    {{ $tc(\'sw-theme-manager.modal.buttonDelete\') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n\n            {% block sw_theme_manager_detail_save_modal %}\n                <sw-modal v-if="showSaveModal"\n                          class="sw-theme-manager-detail-modal"\n                          @modal-close="onCloseSaveModal"\n                          :title="$tc(\'sw-theme-manager.modal.modalTitleSave\')"\n                          variant="large">\n\n                    {% block sw_theme_manager_detail_save_modal_info %}\n                        <div class="sw_theme_manager__confirm-save-text">\n                            {{ $tc(\'sw-theme-manager.modal.textSaveInfo\', 0,\n                            { themeName: theme.name }) }}\n                        </div>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_save_modal_already_assigned_warning %}\n                        <sw-alert\n                            v-if="overwrittenSalesChannelAssignments.length > 0"\n                            variant="warning">\n\n                            <div class="sw-theme-manager-detail__sales-channel-warning" v-if="overwrittenSalesChannelAssignments.length === 1">\n                                <span v-html="$tc(\'sw-theme-manager.modal.salesChannelAlreadyAssignedModal.descriptionSingle\', 0, { newThemeName: theme.name })"></span>\n                            </div>\n\n                            <div class="sw-theme-manager-detail__sales-channel-warning" v-else>\n                                <span v-html="$tc(\'sw-theme-manager.modal.salesChannelAlreadyAssignedModal.descriptionMultiple\', 0, { newThemeName: theme.name })"></span>\n                            </div>\n\n                            <div v-for="salesChannel in overwrittenSalesChannelAssignments">\n                                <b>{{ salesChannel.oldThemeName }}</b> ({{ salesChannel.salesChannelName }})\n                            </div>\n                        </sw-alert>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_save_modal_removed_warning %}\n                        <sw-alert\n                            v-if="removedSalesChannels.length > 0"\n                            variant="warning">\n                            <div class="sw-theme-manager-detail__sales-channel-warning" v-if="removedSalesChannels.length === 1">\n                                <span v-html="$tc(\'sw-theme-manager.modal.salesChannelRemovedModal.descriptionSingle\', 0, { defaultThemeName: defaultTheme.name })"></span>\n                            </div>\n\n                            <div class="sw-theme-manager-detail__sales-channel-warning" v-else>\n                                <span v-html="$tc(\'sw-theme-manager.modal.salesChannelRemovedModal.descriptionMultiple\', 0, { defaultThemeName: defaultTheme.name })"></span>\n                            </div>\n\n                            <div v-for="salesChannel in removedSalesChannels">\n                                <b>{{ theme.name }}</b> ({{ salesChannel.name }})\n                            </div>\n                        </sw-alert>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_save_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_detail_save_modal_cancel %}\n                                <sw-button @click="onCloseSaveModal"\n                                           size="small">\n                                    {{ $tc(\'sw-theme-manager.modal.buttonCancel\') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_theme_manager_detail_save_modal_confirm %}\n                                <sw-button @click="onConfirmThemeSave"\n                                           variant="primary"\n                                           size="small">\n                                    {{ $tc(\'sw-theme-manager.modal.buttonSave\') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n\n            {% block sw_theme_manager_detail_duplicate_modal %}\n                <sw-modal v-if="showDuplicateModal"\n                          class="sw_theme_manager__duplicate-modal"\n                          @modal-close="onCloseDuplicateModal"\n                          :title="$tc(\'sw-theme-manager.modal.modalTitleDuplicate\')"\n                          variant="small">\n\n                    {% block sw_theme_manager_detail_duplicate_modal_name_input %}\n                        <div class="sw_theme_manager__duplicate-info">\n                            {{ $tc(\'sw-theme-manager.modal.textDuplicateInfo\') }}\n                        </div>\n\n                        <sw-text-field\n                            v-model:value="newThemeName"\n                            name="sw-field--duplicate-theme-name"\n                            :label="$tc(\'sw-theme-manager.modal.labelDuplicateThemeName\')"\n                            :placeholder="$tc(\'sw-theme-manager.modal.placeholderDuplicateThemeName\')"\n                        />\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_duplicate_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_detail_duplicate_modal_cancel %}\n                                <sw-button @click="onCloseDuplicateModal"\n                                           size="small">\n                                    {{ $tc(\'sw-theme-manager.modal.buttonCancel\') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_theme_manager_detail_duplicate_modal_confirm %}\n                                <sw-button @click="onConfirmThemeDuplicate"\n                                           variant="primary"\n                                           :disabled="newThemeName.length < 3"\n                                           size="small">\n                                    {{ $tc(\'sw-theme-manager.modal.buttonDuplicateTheme\') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n\n            {% block sw_theme_manager_detail_rename_modal %}\n                <sw-modal v-if="showRenameModal"\n                          class="sw_theme_manager__rename-modal"\n                          @modal-close="onCloseRenameModal"\n                          :title="$tc(\'sw-theme-manager.modal.modalTitleRename\')"\n                          variant="small">\n\n                    {% block sw_theme_manager_detail_rename_modal_name_input %}\n                        <div class="sw_theme_manager__rename-info">\n                            {{ $tc(\'sw-theme-manager.modal.textRenameInfo\') }}\n                        </div>\n\n                        <sw-text-field\n                            v-model:value="newThemeName"\n                            name="sw-field--rename-theme-name"\n                            :label="$tc(\'sw-theme-manager.modal.labelRenameThemeName\')"\n                            :placeholder="$tc(\'sw-theme-manager.modal.placeholderRenameThemeName\')"\n                        />\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_rename_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_detail_rename_modal_cancel %}\n                                <sw-button @click="onCloseRenameModal"\n                                           size="small">\n                                    {{ $tc(\'sw-theme-manager.modal.buttonCancel\') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_theme_manager_detail_rename_modal_confirm %}\n                                <sw-button @click="onConfirmThemeRename"\n                                           variant="primary"\n                                           :disabled="newThemeName.length < 3"\n                                           size="small">\n                                    {{ $tc(\'sw-theme-manager.modal.buttonRenameTheme\') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n\n            {% block sw_theme_manager_detail_error_modal %}\n                <sw-modal v-if="errorModalMessage"\n                          @modal-close="onCloseErrorModal"\n                          :title="$tc(\'sw-theme-manager.modal.errorModalTitle\')"\n                          variant="large">\n\n                    {% block sw_theme_manager_detail_error_modal_message %}\n                        <pre style="white-space: pre-line;">{{ errorModalMessage }}</pre>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_error_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_detail_error_modal_close %}\n                                <sw-button @click="onCloseErrorModal" size="small">\n                                    {{ $tc(\'sw-theme-manager.modal.buttonClose\') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n        </template>\n\n        {% block sw_theme_manager_detail_sidebar %}\n            <template #sidebar>\n                <sw-sidebar :propagateWidth="true">\n                    {% block sw_theme_manager_detail_sidebar_media %}\n                        <sw-sidebar-media-item\n                            ref="mediaSidebarItem"\n                            :initialFolderId="defaultMediaFolderId">\n                            <template #context-menu-items="media">\n                                {% block sw_theme_manager_detail_sidebar_media_items %}\n                                    <template v-if="shouldShowContent">\n                                        <template v-for="(tab, tabName) in structuredThemeFields.tabs">\n                                            <template v-for="block in tab.blocks">\n                                                <template v-for="section in block.sections">\n                                                    <template v-for="(field, fieldName) in section.fields">\n                                                        <sw-context-menu-item v-if="themeConfig[fieldName] && field.type === \'media\'"\n                                                                              :key="fieldName"\n                                                                              @click="onAddMediaToTheme(media.mediaItem, currentThemeConfig[fieldName])">\n                                                            {{ $tc(\'sw-theme-manager.modal.addToMediaLabel\', 0, { name: field.label }) }}\n                                                        </sw-context-menu-item>\n                                                    </template>\n                                                </template>\n                                            </template>\n                                        </template>\n                                    </template>\n                                {% endblock %}\n                            </template>\n                        </sw-sidebar-media-item>\n                    {% endblock %}\n                </sw-sidebar>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',inject:["acl","feature"],mixins:[t.getByName("theme"),t.getByName("notification")],filters:{cssValue:function(e){return e?(e=e.toString()).replace(/`|´/g,""):""}},data(){return{theme:null,parentTheme:!1,defaultMediaFolderId:null,structuredThemeFields:{},themeConfig:{},currentThemeConfig:{},showResetModal:!1,showSaveModal:!1,errorModalMessage:null,baseThemeConfig:{},currentThemeConfigInitial:{},inheritanceChanged:[],isLoading:!1,isSaveSuccessful:!1,mappedFields:{color:"colorpicker",fontFamily:"text"},defaultTheme:null,themeCompatibleSalesChannels:[],salesChannelsWithTheme:null,newAssignedSalesChannels:[],overwrittenSalesChannelAssignments:[],removedSalesChannels:[]}},metaInfo(){return{title:this.$createTitle(this.themeName)}},computed:{themeName(){return this.theme?this.theme.name:""},isDerived(){return!!this.theme&&"Storefront"!==this.theme.technicalName&&(!!this.parentTheme||!l(this.theme?.baseConfig?.configInheritance)||!!this.theme.baseConfig.configInheritance.includes("@Storefront"))},mediaRepository(){return this.repositoryFactory.create("media")},defaultFolderRepository(){return this.repositoryFactory.create("media_default_folder")},salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},previewMedia(){return this.theme&&this.theme.previewMedia&&this.theme.previewMedia.id&&this.theme.previewMedia.url?{"background-image":`url('${this.theme.previewMedia.url}')`,"background-size":"cover"}:{"background-image":this.defaultThemeAsset}},defaultThemeAsset(){let e=Shopware.Filter.getByName("asset")("administration/static/img/theme/default_theme_preview.jpg");return`url(${e})`},deleteDisabledToolTip(){return{showDelay:300,message:this.$tc("sw-theme-manager.actions.deleteDisabledToolTip"),disabled:0===this.theme.salesChannels.length}},themeId(){return this.$route.params.id},shouldShowContent(){return Object.values(this.structuredThemeFields).length>0&&!this.isLoading},hasMoreThanOneTab(){return Object.values(this.structuredThemeFields.tabs).length>1},isDefaultTheme(){return this.theme.id===this.defaultTheme.id}},created(){this.createdComponent()},watch:{themeId(){this.getTheme()}},methods:{createdComponent(){this.getTheme(),this.setPageContext()},getTheme(){if(!this.themeId)return;this.isLoading=!0;let e=new a;e.addAssociation("previewMedia"),e.addAssociation("salesChannels"),this.themeRepository.get(this.themeId,Shopware.Context.api,e).then(e=>{this.theme=e,this.getThemeConfig(),this.theme.parentThemeId&&this.getParentTheme(),this.isLoading=!1})},checkInheritanceFunction(e){return()=>this.currentThemeConfig[e].isInherited},handleInheritanceInput(e,t){this.currentThemeConfig[t].isInherited=null===e},getThemeConfig(){this.isLoading=!0,this.theme&&this.themeId&&(this.structuredThemeFields={},this.currentThemeConfig={},this.themeConfig={},this.baseThemeConfig={},this.currentThemeConfigInitial={},this.themeService.getStructuredFields(this.themeId).then(e=>{this.structuredThemeFields=e}),this.themeService.getConfiguration(this.themeId).then(e=>{this.currentThemeConfig=e.currentFields,this.currentThemeConfigInitial=i(this.currentThemeConfig),this.themeConfig=e.fields,this.baseThemeConfig=i(e.baseThemeFields),this.isLoading=!1}))},setPageContext(){this.getDefaultTheme().then(e=>{this.defaultTheme=e}),this.getDefaultFolderId().then(e=>{this.defaultMediaFolderId=e}),this.getThemeCompatibleSalesChannels().then(e=>{this.themeCompatibleSalesChannels=e}),this.getSalesChannelsWithTheme().then(e=>{this.salesChannelsWithTheme=e})},getParentTheme(){this.themeRepository.get(this.theme.parentThemeId).then(e=>{this.parentTheme=e})},openMediaSidebar(){this.$refs.mediaSidebarItem.openContent()},onAddMediaToTheme(e,t){this.setMediaItem(e,t)},onDropMedia(e,t){this.setMediaItem(e,t)},setMediaItem(e,t){t.value=e.id},successfulUpload(e,t){this.mediaRepository.get(e.targetId).then(e=>(this.setMediaItem(e,t),!0))},removeMediaItem(e,t,n,a){this.currentThemeConfig[e].value=null,this.themeConfig[e].value=null,n?t(null):a(null),this.currentThemeConfigInitial[e].value=!1},restoreMediaInheritance(e,t){return e},onReset(){this.acl.can("theme.editor")&&null!==this.theme.configValues&&(this.showResetModal=!0)},onCloseResetModal(){this.showResetModal=!1},onCloseErrorModal(){this.errorModalMessage=null},onConfirmThemeReset(){this.acl.can("theme.editor")&&(this.themeService.resetTheme(this.themeId).then(()=>{this.getTheme()}),this.showResetModal=!1)},onSave(){if(this.findChangedSalesChannels(),this.theme.salesChannels.length>0||this.removedSalesChannels.length>0){this.showSaveModal=!0;return}return this.onSaveTheme()},onSaveClean(){if(this.findChangedSalesChannels(),this.theme.salesChannels.length>0||this.removedSalesChannels.length>0){this.showSaveModal=!0;return}return this.onSaveTheme(!0)},onCloseSaveModal(){this.showSaveModal=!1},onConfirmThemeSave(){this.onSaveTheme(),this.showSaveModal=!1},onSaveTheme(e=!1){if(this.acl.can("theme.editor"))return this.isSaveSuccessful=!1,this.isLoading=!0,Promise.all([this.saveSalesChannels(),this.saveThemeConfig(e)]).finally(()=>{this.getTheme()}).catch(e=>{this.isLoading=!1;let t=e.response.data.errors[0];if("THEME__COMPILING_ERROR"===t.code){this.createNotificationError({title:this.$tc("sw-theme-manager.detail.error.themeCompile.title"),message:this.$tc("sw-theme-manager.detail.error.themeCompile.message"),autoClose:!1,actions:[{label:this.$tc("sw-theme-manager.detail.showFullError"),method:(function(){this.errorModalMessage=t.detail}).bind(this)}]});return}this.createNotificationError({title:this.$tc("global.default.error"),message:e.toString(),autoClose:!0})})},saveSalesChannels(){let e=[];return this.newAssignedSalesChannels.length>0&&this.newAssignedSalesChannels.forEach(t=>{e.push(this.themeService.assignTheme(this.themeId,t))}),this.removedSalesChannels.length>0&&this.removedSalesChannels.forEach(t=>{e.push(this.themeService.assignTheme(this.defaultTheme.id,t.id))}),Promise.all(e)},findChangedSalesChannels(){this.newAssignedSalesChannels=[],this.removedSalesChannels=[],this.overwrittenSalesChannelAssignments=[];let e=this.themeRepository.getSyncChangeset([this.theme]);e.changeset.length>0&&e.changeset[0].changes.hasOwnProperty("salesChannels")&&this.findAddedSalesChannels(e.changeset[0].changes.salesChannels),e.deletions.length>0&&this.findRemovedSalesChannels(e.deletions)},findAddedSalesChannels(e){e.forEach(e=>{this.newAssignedSalesChannels.push(e.id);let t=this.salesChannelsWithTheme.get(e.id);null!==t&&this.overwrittenSalesChannelAssignments.push({id:e.id,salesChannelName:this.theme.salesChannels.get(e.id).translated.name,oldThemeName:t.extensions.themes[0].name})})},findRemovedSalesChannels(e){e.forEach(e=>{this.removedSalesChannels.push({id:e.key,name:this.theme.getOrigin().salesChannels.get(e.key).translated.name})})},getCurrentChangeset(e=!1){let t=s(this.currentThemeConfigInitial,this.currentThemeConfig),n=this.theme.configValues??{};if(Object.assign(n,t),!e)return n;let a={};for(let[e,t]of Object.entries(n))void 0!==this.themeConfig[e]&&void 0!==this.themeConfig[e].type&&null!==this.themeConfig[e].type&&(a[e]=t);return a},removeInheritedFromChangeset(e){for(let t of Object.keys(e)){if(this.wrapperIsVisible(t)&&this.$refs[`wrapper-${t}`][0].isInherited){delete e[`${t}`];continue}this.wrapperIsVisible(t)||void 0===this.inheritanceChanged[`wrapper-${t}`]||!0!==this.inheritanceChanged[`wrapper-${t}`]||delete e[`${t}`]}},wrapperIsVisible(e){return void 0!==this.$refs[`wrapper-${e}`]&&l(this.$refs[`wrapper-${e}`])&&void 0!==this.$refs[`wrapper-${e}`][0]},saveThemeConfig(e=!1){let t=this.getCurrentChangeset(e);return this.removeInheritedFromChangeset(t),this.themeService.resetTheme(this.themeId).then(()=>this.themeService.updateTheme(this.themeId,{config:t}))},saveFinish(){this.isSaveSuccessful=!1},onSearch(e=null){!e.length||e.length<=0?this.term=null:this.term=e},onChangeTab(){for(let[e,t]of Object.entries(this.$refs))e.startsWith("wrapper-")&&void 0!==t&&l(t)&&void 0!==t[0]&&(this.inheritanceChanged[e]=t[0].isInherited)},mapSwFieldTypes(e){return this.mappedFields[e]?this.mappedFields[e]:null},getThemeCompatibleSalesChannels(){let e=new a;return e.addAssociation("type"),e.addFilter(a.equalsAny("type.name",["Storefront","Headless"])),this.salesChannelRepository.search(e).then(e=>e.getIds())},getSalesChannelsWithTheme(){let e=new a;return e.addAssociation("themes"),e.addFilter(a.not("or",[a.equals("themes.id",null)])),this.salesChannelRepository.search(e).then(e=>e)},getDefaultFolderId(){let e=new a(1,1);return e.addAssociation("folder"),e.addFilter(a.equals("entity",this.themeRepository.schema.entity)),this.defaultFolderRepository.search(e).then(e=>{let t=e.first();return t.folder.id?t.folder.id:null})},getDefaultTheme(){let e=new a;return e.addFilter(a.equals("technicalName","Storefront")),this.themeRepository.search(e).then(e=>e.first())},getBind(e){let t=Object.assign({},e);return t?.type!=="switch"&&t?.type!=="checkbox"&&t.custom?.componentName!=="sw-switch-field"&&t.custom?.componentName!=="sw-checkbox-field"&&(t.label=""),delete t.type,Object.assign(t,t.custom),t.custom?.componentName!=="sw-switch-field"&&t.custom?.componentName!=="sw-checkbox-field"&&delete t.custom,{type:e.type,config:t}},selectionDisablingMethod(e){return!!this.isDefaultTheme&&this.theme.getOrigin().salesChannels.has(e.id)},isThemeCompatible(e){return this.themeCompatibleSalesChannels.includes(e.id)}}}),n(228);let{Component:o,Mixin:m}=Shopware,r=Shopware.Data.Criteria;o.register("sw-theme-manager-list",{template:'{% block sw_theme_manager_list %}\n    <sw-page class="sw-theme-list">\n\n        {% block sw_theme_manager_list_search_bar %}\n            <template #search-bar>\n                <sw-search-bar :placeholder="$tc(\'sw-theme-manager.general.placeholderSearchBar\')"\n                               :initialSearchType="$tc(\'sw-theme-manager.general.mainMenuItemGeneral\')"\n                               @search="onSearch">\n                </sw-search-bar>\n            </template>\n        {% endblock %}\n\n        {% block sw_theme_manager_list_toolbar %}\n            <template #smart-bar-header>\n                <h2> {{ $tc(\'sw-theme-manager.general.mainMenuItemGeneral\') }}</h2>\n            </template>\n        {% endblock %}\n\n        {% block sw_theme_list_card_view %}\n            <template #content>\n                <sw-card-view>\n\n                    {% block sw_themes_list_listing %}\n                        <div class="sw-theme-list__content">\n\n                            {% block sw_theme_list_listing_actions %}\n                                <div class="sw-theme-list__actions">\n\n                                    {% block sw_theme_list_listing_title %}\n                                        <h3>{{ $tc(\'sw-theme-manager.general.mainMenuHeader\') }}</h3>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_listing_actions_sorting %}\n                                        <div class="sw-theme-list__actions-sorting">\n                                            <sw-select-field\n                                                name="sortType"\n                                                :label="$tc(\'sw-theme-manager.sorting.labelSort\')"\n                                                :value="sortingConCat"\n                                                @update:value="onSortingChanged"\n                                                aside\n                                            >\n\n                                                {% block sw_theme_list_listing_actions_sorting_options %}\n                                                <option v-for="sortOption in sortOptions"\n                                                        :value="sortOption.value">\n                                                    {{ sortOption.name }}\n                                                </option>\n                                                {% endblock %}\n                                            </sw-select-field>\n                                        </div>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_listing_actions_mode %}\n                                        <div class="sw-theme-list__actions-mode" @click="onListModeChange">\n                                            <sw-icon name="regular-view-normal" size="16" v-if="listMode === \'grid\'"></sw-icon>\n                                            <sw-icon name="regular-view-grid" size="16" v-if="listMode === \'list\'"></sw-icon>\n                                        </div>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_theme_list_listing_list %}\n                                <div class="sw-theme-list__list">\n\n                                    {% block sw_theme_list_listing_list_card %}\n                                        <sw-card class="sw-theme-list__list-card" v-if="listMode === \'list\'">\n                                            <template #grid>\n\n                                                {% block sw_theme_list_listing_list_data_grid %}\n                                                    <sw-data-grid\n                                                        class="sw-theme-list__list-data-grid"\n                                                        identifier="sw-theme-list"\n                                                        :isLoading="isLoading"\n                                                        :dataSource="themes"\n                                                        :columns="columnConfig"\n                                                        :skeletonItemAmount="limit"\n                                                        :sortBy="sortBy"\n                                                        :sortDirection="sortDirection"\n                                                        :allowInlineEdit="false"\n                                                        :allowColumnEdit="false"\n                                                        :showSettings="false"\n                                                        :showSelection="false"\n                                                        @column-sort="onSortColumn">\n\n                                                        {% block sw_theme_list_listing_list_data_grid_column_name %}\n                                                            <template #column-name="{ item }">\n                                                                <sw-icon\n                                                                    name="regular-lock"\n                                                                    class="sw-theme-list__icon-lock"\n                                                                    v-if="!item.parentThemeId"\n                                                                    v-tooltip="lockToolTip"\n                                                                    size="14">\n                                                                </sw-icon>\n                                                                <router-link :to="{ name: \'sw.theme.manager.detail\', params: { id: item.id } }">\n                                                                    {{ item.name }}\n                                                                </router-link>\n                                                            </template>\n                                                        {% endblock %}\n\n                                                        {% block sw_theme_list_listing_list_data_grid_column_assignment %}\n                                                            <template #column-assignment="{ item }">\n                                                                {{ item.salesChannels.length }}\n                                                            </template>\n                                                        {% endblock %}\n\n                                                        {% block sw_theme_list_listing_list_data_grid_column_created %}\n                                                            <template #column-createdAt="{ item }">\n                                                                {{ dateFilter(item.createdAt, { hour: \'2-digit\', minute: \'2-digit\' }) }}\n                                                            </template>\n                                                        {% endblock %}\n\n                                                        {% block sw_theme_list_listing_list_data_grid_actions %}\n                                                            <template #actions="{ item }">\n                                                                {% block sw_theme_list_listing_list_data_grid_actions_edit %}\n                                                                    <sw-context-menu-item\n                                                                        class="sw-theme-list-item__option-edit"\n                                                                        :routerLink="{ name: \'sw.theme.manager.detail\', params: { id: item.id } }">\n                                                                        {{ $tc(\'sw-theme-manager.themeListItem.edit\') }}\n                                                                    </sw-context-menu-item>\n                                                                {% endblock %}\n\n                                                                {% block sw_theme_list_listing_list_data_grid_actions_rename %}\n                                                                    <sw-context-menu-item\n                                                                        @click="onRenameTheme(item)"\n                                                                        class="sw-theme-list-item__option-rename"\n                                                                        :disabled="!acl.can(\'theme.editor\')">\n                                                                        {{ $tc(\'sw-theme-manager.themeListItem.rename\') }}\n                                                                    </sw-context-menu-item>\n                                                                {% endblock %}\n\n                                                                {% block sw_theme_list_listing_list_data_grid_actions_delete %}\n                                                                    <sw-context-menu-item\n                                                                        variant="danger"\n                                                                        class="sw-theme-list-item__option-delete"\n                                                                        :disabled="item.salesChannels.length > 0 || !acl.can(\'theme.deleter\')"\n                                                                        v-tooltip="deleteDisabledToolTip(item)"\n                                                                        @click="onDeleteTheme(item)"\n                                                                        v-if="item.parentThemeId">\n\n                                                                        {{ $tc(\'sw-theme-manager.themeListItem.delete\') }}\n                                                                    </sw-context-menu-item>\n                                                                {% endblock %}\n\n                                                                {% block sw_theme_list_listing_list_data_grid_actions_create %}\n                                                                    <sw-context-menu-item\n                                                                        v-if="!item.parentThemeId"\n                                                                        class="sw-theme-list-item__option-duplicate"\n                                                                        @click="onDuplicateTheme(item)"\n                                                                        :disabled="!acl.can(\'theme.creator\')">\n                                                                        {{ $tc(\'sw-theme-manager.actions.duplicate\') }}\n                                                                    </sw-context-menu-item>\n                                                                {% endblock %}\n                                                            </template>\n                                                        {% endblock %}\n\n                                                        {% block sw_theme_list_listing_list_data_grid_pagination %}\n                                                            <template #pagination>\n                                                                <sw-pagination\n                                                                    :page="page"\n                                                                    :limit="limit"\n                                                                    :total="total"\n                                                                    :steps="[5, 10, 25, 50]"\n                                                                    @page-change="onPageChange">\n                                                                </sw-pagination>\n                                                            </template>\n                                                        {% endblock %}\n                                                    </sw-data-grid>\n                                                {% endblock %}\n                                            </template>\n                                        </sw-card>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_listing_list_grid %}\n                                        <div class="sw-theme-list__list-grid" v-if="listMode === \'grid\'">\n\n                                            {% block sw_theme_list_listing_list_grid_content %}\n                                                <div class="sw-theme-list__list-grid-content">\n                                                    {% block sw_theme_list_listing_list_item %}\n                                                        <template v-if="!isLoading">\n                                                            <sw-theme-list-item\n                                                            v-for="theme in themes"\n                                                            :theme="theme"\n                                                            :key="theme.id"\n                                                            @preview-image-change="onPreviewChange"\n                                                            @item-click="onListItemClick">\n\n                                                            <template #contextMenu>\n                                                                <sw-context-button :zIndex="1100"\n                                                                                   class="sw-theme-list-item__options">\n\n                                                                    {% block sw_theme_list_listing_list_item_option_add_preview %}\n                                                                        <sw-context-menu-item\n                                                                            class="sw-theme-list-item__option-preview"\n                                                                            @click="onPreviewChange(theme)"\n                                                                            :disabled="!acl.can(\'theme.editor\')">\n                                                                            {{ $tc(\'sw-theme-manager.themeListItem.addPreviewImage\') }}\n                                                                        </sw-context-menu-item>\n                                                                    {% endblock %}\n\n                                                                    {% block sw_theme_list_listing_list_item_option_remove_preview %}\n                                                                        <sw-context-menu-item\n                                                                            class="sw-theme-list-item__option-preview sw-theme-list-item__option-preview-remove"\n                                                                            v-if="theme.previewMediaId"\n                                                                            variant="danger"\n                                                                            @click="onPreviewImageRemove(theme)"\n                                                                            :disabled="!acl.can(\'theme.editor\')">\n                                                                            {{ $tc(\'sw-theme-manager.themeListItem.removePreviewImage\') }}\n                                                                        </sw-context-menu-item>\n                                                                    {% endblock %}\n\n                                                                    {% block sw_theme_list_listing_list_item_option_rename %}\n                                                                        <sw-context-menu-item\n                                                                            @click="onRenameTheme(theme)"\n                                                                            class="sw-theme-list-item__option-rename"\n                                                                            :disabled="!acl.can(\'theme.editor\')">\n                                                                            {{ $tc(\'sw-theme-manager.themeListItem.rename\') }}\n                                                                        </sw-context-menu-item>\n                                                                    {% endblock %}\n\n                                                                    {% block sw_theme_list_listing_list_item_option_create %}\n                                                                        <sw-context-menu-item\n                                                                            v-if="!theme.parentThemeId"\n                                                                            class="sw-theme-list-item__option-duplicate"\n                                                                            @click="onDuplicateTheme(theme)"\n                                                                            :disabled="!acl.can(\'theme.creator\')">\n                                                                            {{ $tc(\'sw-theme-manager.actions.duplicate\') }}\n                                                                        </sw-context-menu-item>\n                                                                    {% endblock %}\n\n                                                                    {% block sw_theme_list_listing_list_item_option_delete %}\n                                                                        <sw-context-menu-item\n                                                                            v-if="theme.parentThemeId"\n                                                                            class="sw-theme-list-item__option-delete"\n                                                                            variant="danger"\n                                                                            :disabled="theme.salesChannels.length > 0 || !acl.can(\'theme.deleter\')"\n                                                                            v-tooltip="deleteDisabledToolTip(theme)"\n                                                                            @click="onDeleteTheme(theme)">\n                                                                            {{ $tc(\'sw-theme-manager.themeListItem.delete\') }}\n                                                                        </sw-context-menu-item>\n                                                                    {% endblock %}\n                                                                </sw-context-button>\n                                                            </template>\n                                                        </sw-theme-list-item>\n                                                        </template>\n\n                                                        <template v-else>\n                                                            <sw-skeleton variant="gallery" />\n                                                            <sw-skeleton variant="gallery" />\n                                                            <sw-skeleton variant="gallery" />\n                                                            <sw-skeleton variant="gallery" />\n                                                            <sw-skeleton variant="gallery" />\n                                                            <sw-skeleton variant="gallery" />\n                                                            <sw-skeleton variant="gallery" />\n                                                            <sw-skeleton variant="gallery" />\n                                                            <sw-skeleton variant="gallery" />\n                                                        </template>\n                                                    {% endblock %}\n                                                </div>\n                                            {% endblock %}\n\n                                            {% block sw_theme_list_listing_pagination %}\n                                            <sw-pagination class="sw-theme-list__list-pagination"\n                                                           v-if="!isLoading"\n                                                           :page="page"\n                                                           :limit="limit"\n                                                           :total="total"\n                                                           :steps="[9]"\n                                                           @page-change="onPageChange">\n                                            </sw-pagination>\n                                            {% endblock %}\n                                        </div>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </div>\n                    {% endblock %}\n\n                    {% block sw_theme_list_media_modal %}\n                        <sw-media-modal-v2\n                            variant="regular"\n                            v-if="showMediaModal"\n                            :caption="$tc(\'sw-theme-manager.general.captionMediaUpload\')"\n                            entityContext="theme"\n                            :allowMultiSelect="false"\n                            @media-modal-selection-change="onPreviewImageChange"\n                            @modal-close="onModalClose">\n                        </sw-media-modal-v2>\n                    {% endblock %}\n\n                    {% block sw_theme_list_delete_modal %}\n                        <sw-modal v-if="showDeleteModal"\n                                  @modal-close="onCloseDeleteModal"\n                                  :title="$tc(\'global.default.warning\')"\n                                  variant="small">\n\n                            {% block sw_theme_list_delete_modal_info %}\n                                <div class="sw_theme_manager__confirm-delete-text">\n                                    {{ $tc(\'sw-theme-manager.modal.textDeleteInfo\', 0,\n                                    { themeName: modalTheme.name }) }}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_theme_list_delete_modal_footer %}\n                                <template #modal-footer>\n                                    {% block sw_theme_list_delete_modal_cancel %}\n                                        <sw-button @click="onCloseDeleteModal"\n                                                   size="small">\n                                            {{ $tc(\'sw-theme-manager.modal.buttonCancel\') }}\n                                        </sw-button>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_delete_modal_confirm %}\n                                        <sw-button @click="onConfirmThemeDelete"\n                                                   variant="danger"\n                                                   size="small">\n                                            {{ $tc(\'sw-theme-manager.modal.buttonDelete\') }}\n                                        </sw-button>\n                                    {% endblock %}\n                                </template>\n                            {% endblock %}\n                        </sw-modal>\n                    {% endblock %}\n\n                    {% block sw_theme_list_duplicate_modal %}\n                        <sw-modal v-if="showDuplicateModal"\n                                  class="sw_theme_manager__duplicate-modal"\n                                  @modal-close="onCloseDuplicateModal"\n                                  :title="$tc(\'sw-theme-manager.modal.modalTitleDuplicate\')"\n                                  variant="small">\n\n                            {% block sw_theme_list_duplicate__modal_name_input %}\n                                <div class="sw_theme_manager__duplicate-info">\n                                    {{ $tc(\'sw-theme-manager.modal.textDuplicateInfo\') }}\n                                </div>\n\n                                <sw-text-field\n                                    v-model:value="newThemeName"\n                                    name="sw-field--duplicate-theme-name"\n                                    :label="$tc(\'sw-theme-manager.modal.labelDuplicateThemeName\')"\n                                    :placeholder="$tc(\'sw-theme-manager.modal.placeholderDuplicateThemeName\')"\n                                />\n                            {% endblock %}\n\n                            {% block sw_theme_list_duplicate_modal_footer %}\n                                <template #modal-footer>\n                                    {% block sw_theme_list_duplicate_modal_cancel %}\n                                        <sw-button @click="onCloseDuplicateModal"\n                                                   size="small">\n                                            {{ $tc(\'sw-theme-manager.modal.buttonCancel\') }}\n                                        </sw-button>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_duplicate_modal_confirm %}\n                                        <sw-button @click="onConfirmThemeDuplicate"\n                                                   variant="primary"\n                                                   :disabled="newThemeName.length < 3"\n                                                   size="small">\n                                            {{ $tc(\'sw-theme-manager.modal.buttonDuplicateTheme\') }}\n                                        </sw-button>\n                                    {% endblock %}\n                                </template>\n                            {% endblock %}\n                        </sw-modal>\n                    {% endblock %}\n\n                    {% block sw_theme_list_rename_modal %}\n                        <sw-modal v-if="showRenameModal"\n                                  class="sw_theme_manager__rename-modal"\n                                  @modal-close="onCloseRenameModal"\n                                  :title="$tc(\'sw-theme-manager.modal.modalTitleRename\')"\n                                  variant="small">\n\n                            {% block sw_theme_list_rename__modal_name_input %}\n                                <div class="sw_theme_manager__rename-info">\n                                    {{ $tc(\'sw-theme-manager.modal.textRenameInfo\') }}\n                                </div>\n\n                                <sw-text-field\n                                    v-model:value="newThemeName"\n                                    name="sw-field--rename-theme-name"\n                                    :label="$tc(\'sw-theme-manager.modal.labelRenameThemeName\')"\n                                    :placeholder="$tc(\'sw-theme-manager.modal.placeholderRenameThemeName\')"\n                                />\n                            {% endblock %}\n\n                            {% block sw_theme_list_rename_modal_footer %}\n                                <template #modal-footer>\n                                    {% block sw_theme_list_rename_modal_cancel %}\n                                        <sw-button @click="onCloseRenameModal"\n                                                   size="small">\n                                            {{ $tc(\'sw-theme-manager.modal.buttonCancel\') }}\n                                        </sw-button>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_rename_modal_confirm %}\n                                        <sw-button @click="onConfirmThemeRename"\n                                                   variant="primary"\n                                                   :disabled="newThemeName.length < 3"\n                                                   size="small">\n                                            {{ $tc(\'sw-theme-manager.modal.buttonRenameTheme\') }}\n                                        </sw-button>\n                                    {% endblock %}\n                                </template>\n                            {% endblock %}\n                        </sw-modal>\n                    {% endblock %}\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',inject:["acl"],mixins:[m.getByName("notification"),m.getByName("listing"),m.getByName("theme")],data(){return{themes:[],isLoading:!1,total:0,disableRouteParams:!0,salesChannelId:this.$route.params.id,listMode:"grid",sortBy:"createdAt",sortDirection:"DESC",limit:9,term:null}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{languageRepository(){return this.repositoryFactory.create("language")},columnConfig(){return this.getColumnConfig()},sortOptions(){return[{value:"createdAt:DESC",name:this.$tc("sw-theme-manager.sorting.labelSortByCreatedDsc")},{value:"createdAt:ASC",name:this.$tc("sw-theme-manager.sorting.labelSortByCreatedAsc")},{value:"updatedAt:DESC",name:this.$tc("sw-theme-manager.sorting.labelSortByUpdatedDsc")},{value:"updatedAt:ASC",name:this.$tc("sw-theme-manager.sorting.labelSortByUpdatedAsc")}]},sortingConCat(){return`${this.sortBy}:${this.sortDirection}`},lockToolTip(){return{showDelay:100,message:this.$tc("sw-theme-manager.general.lockedToolTip")}},dateFilter(){return Shopware.Filter.getByName("date")}},methods:{onRefresh(){this.getList()},getList(){this.isLoading=!0;let e=new r(this.page,this.limit);return e.addAssociation("previewMedia"),e.addAssociation("salesChannels"),e.addSorting(r.sort(this.sortBy,this.sortDirection)),e.addFilter(r.equals("active",!0)),null!==this.term&&e.setTerm(this.term),this.themeRepository.search(e,Shopware.Context.api).then(e=>(this.total=e.total,this.themes=e,this.isLoading=!1,this.pages)).catch(()=>{this.isLoading=!1})},resetList(){this.page=1,this.themes=[],this.updateRoute({page:this.page,limit:this.limit,term:this.term,sortBy:this.sortBy,sortDirection:this.sortDirection}),this.getList()},onChangeLanguage(e){Shopware.Context.api.languageId=e,this.resetList()},onListItemClick(e){this.$router.push({name:"sw.theme.manager.detail",params:{id:e.id}})},onSortingChanged(e){[this.sortBy,this.sortDirection]=e.split(":"),this.resetList()},onSearch(e=null){this.term=e.length>0?e:null,this.resetList()},onPageChange({page:e,limit:t}){this.page=e,this.limit=t,this.getList(),this.updateRoute({page:this.page,limit:this.limit})},onListModeChange(){this.listMode="grid"===this.listMode?"list":"grid",this.limit="grid"===this.listMode?9:10,this.resetList()},onPreviewChange(e){this.acl.can("theme.editor")&&(this.showMediaModal=!0,this.currentTheme=e)},onPreviewImageRemove(e){this.acl.can("theme.editor")&&(e.previewMediaId=null,e.previewMedia=null,this.saveTheme(e))},onModalClose(){this.showMediaModal=!1,this.currentTheme=null},onPreviewImageChange([e]){this.currentTheme.previewMediaId=e.id,this.saveTheme(this.currentTheme),this.currentTheme.previewMedia=e},saveTheme(e){return this.isLoading=!0,this.themeRepository.save(e,Shopware.Context.api).then(()=>{this.isLoading=!1}).catch(()=>{this.isLoading=!1})},getColumnConfig(){return[{property:"name",label:this.$tc("sw-theme-manager.list.gridHeaderName"),primary:!0},{property:"salesChannels.length",label:this.$tc("sw-theme-manager.list.gridHeaderAssignment"),sortable:!1},{property:"createdAt",label:this.$tc("sw-theme-manager.list.gridHeaderCreated")}]},deleteDisabledToolTip(e){return{showDelay:300,message:this.$tc("sw-theme-manager.actions.deleteDisabledToolTip"),disabled:0===e.salesChannels.length}}}}),n(693);let{Component:h,Application:d}=Shopware;h.register("sw-theme-list-item",{template:'{% block sw_theme_list_item %}\n    <div class="sw-theme-list-item" :class="componentClasses">\n\n        {% block sw_theme_list_item_options %}\n            <slot name="contextMenu"></slot>\n        {% endblock %}\n\n        {% block sw_theme_list_item_image %}\n            <div class="sw-theme-list-item__image"\n                 v-if="theme"\n                 :style="previewMedia"\n                 @click="emitItemClick(theme)">\n            </div>\n\n            <div class="sw-theme-list-item__image is--empty" v-else>\n                {{ $tc(\'sw-theme-manager.themeListItem.emptyText\') }}\n            </div>\n        {% endblock %}\n\n        {% block sw_theme_list_item_info %}\n            <div class="sw-theme-list-item__info">\n                <div v-if="theme" class="sw-theme-list-item__status" :class="componentClasses"></div>\n                <div class="sw-theme-list-item__title" v-if="theme" @click="onThemeClick">{{ theme.name }}</div>\n                <sw-icon v-if="theme && !theme.parentThemeId"\n                         class="sw-theme-list-item__locked"\n                         name="regular-lock"\n                         v-tooltip="lockToolTip"\n                         size="16">\n                </sw-icon>\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n',props:{theme:{type:Object,required:!1,default:null},active:{type:Boolean,required:!1,default:!1},disabled:{type:Boolean,required:!1,default:!1}},computed:{previewMedia(){return this.theme.previewMedia&&this.theme.previewMedia.id&&this.theme.previewMedia.url?{"background-image":`url('${this.theme.previewMedia.url}')`,"background-size":"cover"}:{"background-image":this.defaultThemeAsset}},defaultThemeAsset(){let e=Shopware.Filter.getByName("asset")("administration/static/img/theme/default_theme_preview.jpg");return`url(${e})`},lockToolTip(){return{showDelay:100,message:this.$tc("sw-theme-manager.general.lockedToolTip")}},componentClasses(){return{"is--active":this.isActive(),"is--disabled":this.disabled}}},methods:{isActive(){return this.theme&&this.theme.salesChannels&&this.theme.salesChannels.length>0||this.active},onChangePreviewImage(e){this.disabled||this.$emit("preview-image-change",e)},onThemeClick(){this.disabled||this.$emit("item-click",this.theme)},onRemovePreviewImage(e){e.previewMediaId=null,e.save(),e.previewMedia=null},onDelete(e){this.disabled||this.$emit("theme-delete",e)},emitItemClick(e){this.disabled||this.$emit("item-click",e)}}}),n(338);let{Component:c,Mixin:_}=Shopware,g=Shopware.Data.Criteria;c.register("sw-theme-modal",{template:'{% block sw_theme_modal %}\n    <sw-modal\n        class="sw-theme-modal"\n        @modal-close="closeModal"\n        :title="$tc(\'sw-theme-manager.themeModal.modalTitle\')"\n        :subtitle="$tc(\'sw-theme-manager.themeModal.modalSubtitle\')"\n    >\n\n        {% block sw_theme_modal_header %}\n            <div class="sw-theme-modal__header">\n                <sw-card-section class="sw-theme-modal__header-search">\n                    <sw-container>\n                        <sw-simple-search-field\n                            class="sw-theme-modal__header-search"\n                            variant="form"\n                            :placeholder="$tc(\'sw-theme-manager.general.placeholderSearchBar\')"\n                            @search-term-change="onSearch"\n                        ></sw-simple-search-field>\n                    </sw-container>\n                </sw-card-section>\n\n                {# @deprecated tag:v6.7.0 - This block will be removed #}\n                {% block sw_theme_modal_header_title %}\n                {% endblock %}\n\n                {# @deprecated tag:v6.7.0 - This block will be removed #}\n                {% block sw_theme_modal_header_search %}\n                {% endblock %}\n\n            </div>\n        {% endblock %}\n\n        {% block sw_theme_modal_content %}\n            <div class="sw-theme-modal__content">\n                {% block sw_theme_modal_loader %}\n                    <sw-loader v-if="isLoading"></sw-loader>\n                {% endblock %}\n\n                {% block sw_theme_modal_content %}\n                    <sw-container v-else columns="repeat(auto-fill, minmax(250px, 1fr))" gap="24px">\n                        {% block sw_theme_modal_content_listing %}\n                            <div v-for="theme in themes" class="sw-theme-modal__content-item" :class="{ \'is--selected\': theme.id === selected }">\n                                {% block sw_theme_modal_content_listing_item %}\n\n                                    {% block sw_theme_modal_content_listing_item_checkbox %}\n                                        <sw-checkbox-field @update:value="onSelection(theme.id)" :value="theme.id === selected"></sw-checkbox-field>\n                                    {% endblock %}\n\n                                    {% block sw_theme_modal_content_listing_item_inner %}\n                                        <sw-theme-list-item\n                                            :theme="theme"\n                                            :key="theme.id"\n                                            @item-click="selectItem(theme.id)">\n                                        </sw-theme-list-item>\n                                    {% endblock %}\n\n                                {% endblock %}\n                            </div>\n                        {% endblock %}\n                    </sw-container>\n                {% endblock %}\n            </div>\n        {% endblock %}\n\n        {% block sw_theme_modal_footer %}\n            <template #modal-footer>\n                <sw-button @click="closeModal">\n                    {{ $tc(\'sw-theme-manager.themeModal.actionCancel\') }}\n                </sw-button>\n                <sw-button @click="selectLayout" variant="primary">\n                    {{ $tc(\'sw-theme-manager.themeModal.actionConfirm\') }}\n                </sw-button>\n            </template>\n        {% endblock %}\n\n    </sw-modal>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[_.getByName("listing")],data(){return{selected:null,isLoading:!1,sortBy:"createdAt",sortDirection:"DESC",term:"",total:null,themes:[]}},computed:{themeRepository(){return this.repositoryFactory.create("theme")}},methods:{getList(){this.isLoading=!0;let e=new g(this.page,this.limit);return e.addAssociation("previewMedia"),e.addAssociation("salesChannels"),e.addFilter(g.equals("active",!0)),e.addSorting(g.sort(this.sortBy,this.sortDirection)),e.setTerm(this.term),this.themeRepository.search(e,Shopware.Context.api).then(e=>(this.total=e.total,this.themes=e,this.isLoading=!1,this.themes)).catch(()=>{this.isLoading=!1})},selectLayout(){this.$emit("modal-theme-select",this.selected),this.closeModal()},selectItem(e){this.selected=e},onSearch(e){this.term=e,this.page=1,this.getList()},onSelection(e){this.selected=e},closeModal(){this.$emit("modal-close"),this.selected=null,this.term=null}}}),n(736);let{Module:p}=Shopware;p.register("sw-theme-manager",{type:"core",title:"sw-theme-manager.general.mainMenuItemGeneral",description:"sw-theme-manager.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#ff68b4",icon:"regular-content",favicon:"icon-module-content.png",entity:"theme",routes:{index:{component:"sw-theme-manager-list",path:"index",meta:{privilege:"theme.viewer"}},detail:{component:"sw-theme-manager-detail",path:"detail/:id",meta:{parentPath:"sw.theme.manager.index",privilege:"theme.viewer"}}},navigation:[{id:"sw-theme-manager",label:"sw-theme-manager.general.mainMenuItemGeneral",color:"#ff68b4",icon:"default-object-image",path:"sw.theme.manager.index",privilege:"theme.viewer",position:80,parent:"sw-content"}],routeMiddleware(e,t){let n="sw.sales.channel.detail.theme";"sw.sales.channel.detail"===t.name&&t.children.every(e=>e.name!==n)&&t.children.push({component:"sw-sales-channel-detail-theme",name:n,isChildren:!0,path:"/sw/sales/channel/detail/:id/theme",meta:{parentPath:"sw.sales.channel.list",privilege:"sales_channel.viewer"}}),e(t)}}),n(5),Shopware.Component.register("sw-settings-storefront-index",{template:'{% block sw_settings_storefront_index %}\n<sw-page class="sw-settings-storefront">\n\n    {% block sw_settings_storefront_smart_bar_header %}\n    <template #smart-bar-header>\n        {% block sw_settings_storefront_smart_bar_header_title %}\n        <h2>\n            {% block sw_settings_storefront_smart_bar_header_title_text %}\n            {{ $tc(\'sw-settings.index.title\') }}\n            <sw-icon\n                name="regular-chevron-right-xs"\n                small\n            />\n            {{ $tc(\'sw-settings-storefront.general.textHeadline\') }}\n            {% endblock %}\n        </h2>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    {% block sw_settings_storefront_smart_bar_actions %}\n    <template #smart-bar-actions>\n        {% block sw_settings_storefront_actions_save %}\n        <sw-button-process\n            :is-loading="isLoading"\n            :process-success="isSaveSuccessful"\n            variant="primary"\n            @process-finish="onSaveFinish"\n            @click="savestorefrontSettings"\n        >\n            {{ $tc(\'global.default.save\') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    {% block sw_settings_storefront_content %}\n    <template #content>\n        <sw-card-view>\n            <sw-skeleton v-if="isLoading" />\n\n            {% block sw_settings_storefront %}\n            <sw-card\n                position-identifier="sw-settings-storefront--settings"\n                :title="$tc(\'sw-settings-storefront.configuration.cardTitle\')"\n                class="sw-settings-storefront__input-fields"\n            >\n\n                {% block sw_settings_storefront_smtp_settings %}\n                    <sw-settings-storefront-configuration\n                        :storefront-settings="storefrontSettings"\n                    />\n                {% endblock %}\n\n            </sw-card>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n',inject:["systemConfigApiService"],data(){return{isLoading:!0,isSaveSuccessful:!1,storefrontSettings:{"core.storefrontSettings.iconCache":!0,"core.storefrontSettings.asyncThemeCompilation":!1}}},metaInfo(){return{title:this.$createTitle()}},created(){this.createdComponent()},methods:{async createdComponent(){await this.loadPageContent()},async loadPageContent(){await this.loadstorefrontSettings()},async loadstorefrontSettings(){this.isLoading=!0,this.storefrontSettings=await this.systemConfigApiService.getValues("core.storefrontSettings"),0===Object.keys(this.storefrontSettings).length&&(this.storefrontSettings={"core.storefrontSettings.iconCache":!0}),0===Object.keys(this.storefrontSettings).length&&(this.storefrontSettings={"core.storefrontSettings.asyncThemeCompilation":!1}),this.isLoading=!1},async savestorefrontSettings(){this.isLoading=!0,""===this.storefrontSettings["core.storefrontSettings.iconCache"]&&(this.storefrontSettings["core.storefrontSettings.iconCache"]=!0),""===this.storefrontSettings["core.storefrontSettings.asyncThemeCompilation"]&&(this.storefrontSettings["core.storefrontSettings.asyncThemeCompilation"]=!1),await this.systemConfigApiService.saveValues(this.storefrontSettings),this.isLoading=!1},async onSaveFinish(){await this.loadPageContent()}}}),n(641),Shopware.Component.register("sw-settings-storefront-configuration",{template:'{% block sw_settings_storefront %}\n<div class="sw-settings-storefront-configuration">\n    {% block sw_settings_storefront_settings_icon_cache %}\n    <sw-switch-field\n        v-model:value="storefrontSettings[\'core.storefrontSettings.iconCache\']"\n        :label="$tc(\'sw-settings-storefront.configuration.iconCache\')"\n        v-tooltip.top="{\n                        message: $tc(\'sw-settings-storefront.configuration.iconCacheToolTip\'),\n                        showOnDisabledElements: true\n                    }"\n    />\n    {% endblock %}\n    {% block sw_settings_storefront_settings_theme_async %}\n        <sw-switch-field\n            v-model:value="storefrontSettings[\'core.storefrontSettings.asyncThemeCompilation\']"\n            :label="$tc(\'sw-settings-storefront.configuration.theme.async\')"\n            v-tooltip.top="{\n                        message: $tc(\'sw-settings-storefront.configuration.theme.asyncTooltip\'),\n                        showOnDisabledElements: true\n                    }"\n        />\n    {% endblock %}\n</div>\n{% endblock %}\n',inject:["feature"],props:{storefrontSettings:{type:Object,required:!0}}}),Shopware.Module.register("sw-settings-storefront",{type:"core",name:"sw-settings-storefront",title:"sw-settings-storefront.general.mainMenuItemGeneral",description:"sw-settings-storefront.general.description",color:"#9AA8B5",icon:"regular-cog",favicon:"icon-module-settings.png",routes:{index:{component:"sw-settings-storefront-index",path:"index",meta:{parentPath:"sw.settings.index.system",privilege:"system.system_config"}}},settingsItem:{group:"system",to:"sw.settings.storefront.index",icon:"regular-storefront",privilege:"system.system_config"}});let{Component:w}=Shopware;w.override("sw-sales-channel-detail",{template:"{%  block sw_sales_channel_detail_content_tab_theme %}\n    <sw-tabs-item :disabled=\"isProductComparison || isLoading\"\n                  :route=\"{ name: 'sw.sales.channel.detail.theme', params: { id: $route.params.id } }\"\n                  :title=\"$tc('sw-sales-channel.detail.tabTheme')\">\n        {{ $tc('sw-sales-channel.detail.tabTheme') }}\n    </sw-tabs-item>\n{% endblock %}\n",inject:["themeService"],methods:{getLoadSalesChannelCriteria(){let e=this.$super("getLoadSalesChannelCriteria");return e.addAssociation("themes"),e},async onSave(){this.isLoading=!0,await this.assignSalesChannelTheme(),await this.$super("onSave")},async assignSalesChannelTheme(){let e=this.salesChannel.getOrigin().extensions?.themes?.[0]?.id,t=this.salesChannel.extensions?.themes?.[0]?.id;if(e!==t)try{await this.themeService.assignTheme(t,this.salesChannel.id)}catch{this.createNotificationError({message:this.$tc("sw-theme-manager.general.messageSaveError")})}}}}),n(53);let{Component:u,Mixin:f}=Shopware,b=Shopware.Data.Criteria;u.register("sw-sales-channel-detail-theme",{template:'{% block sw_sales_channel_detail_theme %}\n    <sw-card :title="$tc(\'sales-channel-theme.title\')" :isLoading="isLoading">\n        <div class="sw-sales-channel-detail-theme">\n\n            {% block sw_sales_channel_detail_theme_preview %}\n                <div class="sw-sales-channel-detail-theme__preview">\n                    {% block sw_sales_channel_detail_theme_preview_item %}\n                        <div @click="openThemeModal">\n                            <sw-theme-list-item\n                                :theme="theme"\n                                :disabled="!acl.can(\'sales_channel.editor\')"\n                                :active="!!theme">\n                            </sw-theme-list-item>\n                        </div>\n                    {% endblock %}\n\n                    {% block sw_sales_channel_detail_theme_modal %}\n                        <sw-theme-modal\n                            v-if="showThemeSelectionModal"\n                            @modal-theme-select="onChangeTheme"\n                            @modal-close="closeThemeModal">\n                        </sw-theme-modal>\n                    {% endblock %}\n                </div>\n            {% endblock %}\n\n            {% block sw_sales_channel_detail_theme_info %}\n                <div class="sw-sales-channel-detail-theme__info">\n\n                    {% block sw_sales_channel_detail_theme_info_content %}\n                        <div class="sw-sales-channel-detail-theme__info-content">\n\n                            {% block sw_sales_channel_detail_theme_info_name %}\n                                <div class="sw-sales-channel-detail-theme__info-name" :class="{ \'is--empty\': !theme }">\n                                    {{ theme ? theme.name : $tc(\'sales-channel-theme.defaultTitle\') }}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_sales_channel_detail_theme_info_author %}\n                                <div v-if="theme" class="sw-sales-channel-detail-theme__info-author">\n                                    {{ theme.author }}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_sales_channel_detail_theme_info_description %}\n                                <div v-if="theme && theme.description" class="sw-sales-channel-detail-theme__info-description">\n                                    <p class="sw-sales-channel-detail-theme__info-description-title">\n                                        {{ $tc(\'sw-theme-manager.detail.description\') }}:\n                                    </p>\n                                    <p>{{ theme.description |truncate(140) }}</p>\n                                </div>\n                            {% endblock %}\n                        </div>\n                    {% endblock %}\n\n                    {% block sw_sales_channel_detail_theme_info_actions %}\n                        <div class="sw-sales-channel-detail-theme__info-actions">\n\n                            {% block sw_sales_channel_detail_theme_info_actions_theme %}\n                                <sw-button size="small" @click="openThemeModal" :disabled="!acl.can(\'sales_channel.editor\')">\n                                    {{ theme ? $tc(\'sales-channel-theme.changeTheme\') : $tc(\'sales-channel-theme.changeThemeEmpty\') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_sales_channel_detail_theme_info_actions_manager %}\n                                <sw-button size="small" @click="openInThemeManager" :disabled="!acl.can(\'sales_channel.editor\')">\n                                    {{ theme ? $tc(\'sales-channel-theme.editContent\'): $tc(\'sales-channel-theme.createTheme\') }}\n                                </sw-button>\n                            {% endblock %}\n                        </div>\n                    {% endblock %}\n                </div>\n            {% endblock %}\n\n            {# @deprecated tag:v6.7.0 - This block will be removed #}\n            {% block sw_sales_channel_detail_theme_change_modal %}\n                <sw-modal v-if="showChangeModal"\n                          @modal-close="onCloseChangeModal"\n                          :title="$tc(\'sales-channel-theme.modal.modalTitleChange\')"\n                          variant="small">\n\n                    {# @deprecated tag:v6.7.0 - This block will be removed #}\n                    {% block sw_sales_channel_detail_theme_change_modal_info %}\n                        <p class="sw-sales-channel-detail-theme__confirm-change-text">\n                            {{ $tc(\'sales-channel-theme.modal.textChangeTheme\') }}\n                        </p>\n                    {% endblock %}\n\n                    {# @deprecated tag:v6.7.0 - This block will be removed #}\n                    {% block sw_sales_channel_detail_theme_change_modal_footer %}\n                        <template #modal-footer>\n                            {# @deprecated tag:v6.7.0 - This block will be removed #}\n                            {% block sw_sales_channel_detail_theme_change_modal_cancel %}\n                                <sw-button @click="onCloseChangeModal"\n                                           size="small">\n                                    {{ $tc(\'sales-channel-theme.modal.buttonCancel\') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {# @deprecated tag:v6.7.0 - This block will be removed #}\n                            {% block sw_sales_channel_detail_theme_change_modal_confirm %}\n                                <sw-button @click="onConfirmChange"\n                                           variant="primary"\n                                           size="small">\n                                    {{ $tc(\'sales-channel-theme.modal.buttonChange\') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n        </div>\n    </sw-card>\n{% endblock %}\n',mixins:[f.getByName("notification"),f.getByName("placeholder")],inject:["repositoryFactory","themeService","acl"],props:{salesChannel:{required:!0}},data(){return{theme:null,showThemeSelectionModal:!1,showChangeModal:!1,newThemeId:null,isLoading:!1}},computed:{themeRepository(){return this.repositoryFactory.create("theme")}},watch:{"salesChannel.extensions.themes":{deep:!0,handler(){this.salesChannel&&this.salesChannel.extensions&&!(this.salesChannel.extensions.themes.length<1)&&(this.theme=this.salesChannel.extensions.themes[0],this.getTheme(this.theme.id))}}},created(){this.createdComponent()},methods:{createdComponent(){this.salesChannel&&this.salesChannel.extensions&&!(this.salesChannel.extensions.themes.length<1)&&(this.theme=this.salesChannel.extensions.themes[0],this.getTheme(this.theme.id))},async getTheme(e){if(null===e)return;let t=new b;t.addAssociation("previewMedia"),this.theme=await this.themeRepository.get(e,Shopware.Context.api,t)},openThemeModal(){this.acl.can("sales_channel.editor")&&(this.showThemeSelectionModal=!0)},closeThemeModal(){this.showThemeSelectionModal=!1},openInThemeManager(){this.theme?this.$router.push({name:"sw.theme.manager.detail",params:{id:this.theme.id}}):this.$router.push({name:"sw.theme.manager.index"})},async onChangeTheme(e){this.showThemeSelectionModal=!1,await this.getTheme(e),this.salesChannel.extensions.themes[0]=this.theme},onCloseChangeModal(){this.showChangeModal=!1,this.newThemeId=null},onConfirmChange(){this.newThemeId&&this.onThemeSelect(this.newThemeId),this.showChangeModal=!1,this.newThemeId=null},onThemeSelect(e){this.isLoading=!0,this.getTheme(e),this.themeService.assignTheme(e,this.salesChannel.id).then(()=>{this.isLoading=!1}).catch(()=>{this.createNotificationError({title:this.$tc("sw-theme-manager.general.titleError"),message:this.$tc("sw-theme-manager.general.messageSaveError")}),this.isLoading=!1})}}});let v=Shopware.Classes.ApiService;var k=class extends v{constructor(e,t,n="theme"){super(e,t,n),this.name="themeService"}assignTheme(e,t,n={},a={}){let s=`/_action/${this.getApiBasePath()}/${e}/assign/${t}`;return this.httpClient.post(s,{},{params:{...n},headers:this.getBasicHeaders(a)}).then(e=>v.handleResponse(e))}updateTheme(e,t,n={},a={}){let s=`/_action/${this.getApiBasePath()}/${e}`;return this.httpClient.patch(s,t,{params:{...n},headers:this.getBasicHeaders(a)}).then(e=>v.handleResponse(e))}resetTheme(e,t={},n={}){let a=`/_action/${this.getApiBasePath()}/${e}/reset`;return this.httpClient.patch(a,{},{params:{...t},headers:this.getBasicHeaders(n)}).then(e=>v.handleResponse(e))}getConfiguration(e){let t=`/_action/${this.getApiBasePath()}/${e}/configuration`,n={"sw-language-id":Shopware.State.get("session").languageId};return this.httpClient.get(t,{headers:this.getBasicHeaders(n)}).then(e=>v.handleResponse(e))}getStructuredFields(e){let t=`/_action/${this.getApiBasePath()}/${e}/structured-fields`,n={"sw-language-id":Shopware.State.get("session").languageId};return this.httpClient.get(t,{headers:this.getBasicHeaders(n)}).then(e=>v.handleResponse(e))}};let{Application:C}=Shopware;Shopware.Service().register("themeService",e=>new k(C.getContainer("init").httpClient,e.loginService))}()})();